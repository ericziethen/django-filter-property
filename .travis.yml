language: python

cache: pip

# https://docs.travis-ci.com/user/build-stages/

branches:
  only:
  - master                      # master branch
  - /^[0-9]+\.[0-9]+\.[0-9]+$/  # tagged release branch

# Matrix Expansion (python versions and databases to run tox tests against)
# Tox is only used for running the tests, the linters only have to run against the latest code



# x 1.) Make Test Script Fail
# - 2.) Move to Seaparate Stage, see Build is Failing
# - 3.) Allow Build Stage to Fail but Build OK if others succesfull
# - 4.) Make Check Script work again






python:
  - '3.8'  # Latest Stable Version on Top so Linting and Deployment pick this one
  - '3.7'
  - '3.6'
#  - '3.9-dev'  # Travis currently having some issues with the Dev Version to build

env:
  - DJANGO_DB=SQLITE TOX_SKIP_ENV=".*all_filter_volume_test.*"
  - DJANGO_DB=POSTGRES TOX_SKIP_ENV=".*all_filter_volume_test.*"

jobs:
  include:
    - name: 'Volume Tests - POSTGRES'
      # Postgres Only, Sqlite is slower
      env:
        - DJANGO_DB=POSTGRES
        - TOXENV=mylinux-py38-all_filter_volume_test

    - name: 'Latest Dev - Linting and Checks'
      services: echo PHASE - "services" (nothing to do)
      install:
      # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
      - pip install -r requirements.txt
      - pip list
      script:
      # Check Django, e.g. Migrations are working
      - ./dev/check_django.sh

      # Run Linter
      - ./dev/run_linters.sh

    - name: 'Check Package Safety (Failure Allowed)'
      allow_failures: true
      services: echo PHASE - "services" (nothing to do)
      install:
      # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
      - pip install -r requirements.txt
      - pip list
      script:
      # Run Package Safety
      - ./dev/check_package_safety.sh

    - stage: Deploy
      # to test conditions see https://docs.travis-ci.com/user/conditions-testing
      # Only create a deployment stage for properly tagged branches
      if: (tag =~ ^[0-9]+\.[0-9]+\.[0-9]+$)
      install: 
      - echo PHASE - install - skip, nothing to do
      script: 
      - echo PHASE - script - skip, nothing to do
      after_success: 
      - echo PHASE - after_success - skip, nothing to do
      before_deploy:
      - ./dev/Packaging/check_travis_release.sh
      deploy:
      - provider: pypi
        skip_cleanup: true
        distributions: sdist bdist_wheel
        #server: https://test.pypi.org/legacy/  # Disable to deploy to Proper PyTest
        user: __token__
        password:
          # PyPi Token for this project only
          secure: N0wJ46a8ACWMtYvE123jQqBf49E/txBXnxZ7AKq9yV2eYYmg/7JCefnUVO/V1XAG9bPngFcPg4OjF5carU70UEXdiXjdaR4L/sowInt1uq4MbFrqznx8Z8ALUsOT61E7uGoCHfNpqR4AdlCE3h+q7HRv1bJ9TtjJ7wjJpDo+k4/xgabJgjxPxNSYcJZTh6JVhAIlDRTt7gcr4quoqiQHWx2la4HeQbmJJPUAe6ZO1QBsahBNIjc9nKHgGMGpR3iuWMEwK/oEmzIEjuSqnzXn7jL0AxjvhNTRYwij4rhDAS9JogXxagCIrDZSQTrl7pUTiM9bgY/NDvkHeLRibiiYLI2SinH/eezk3TQwKuigP47Nmu6dL2SI0j/aPB9SyAKBdiPlbAGlivuCaEQS/OlJjmim4jTQt6+dtvfhxhgb3aR1IZrfG7DxwrqxsRaiYkLSUGVR71TdlqmEVcyMp/zS1RA5rN0F2xLMpoiilH7GFJqR4ue5JWgTFbnf2lSIaP5z0MqKRk2AUw4nJ3MtzqK3A4YmLUhcjyBcrCWXqlf/L5OhVGI20bIahBppJpVAOL+z0g2MWy5EohgIa+pyc+piup9+wdUVQPe7OGwuE519QvqwSOlhR9FoxRLuoZ3EF31SVuJs0irqkH+ax5sczu6AeKUCGptiZ7b49uYXAuRYJTk=
        on:
          tags: true
          branch: master

services:
  - postgresql

before_install:
  # Print Python Details, Upgrade base packages
  - pip --version

  - python --version --version
  - python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
  - pip list

  - python -m pip install --upgrade pip pipenv
  - pip list

  # Print Environment Variables
  - if [ "$TRAVIS_OS_NAME" = "windows" ]; then set; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then printenv; fi

install:
  - pip install coverage tox-travis

before_script:
  - if [ "$DJANGO_DB" = "POSTGRES" ]; then psql -c 'create database travis_ci_test;' -U postgres; fi

script:
  - coverage erase
  - echo DJANGO_DB - "$DJANGO_DB";
  - if [ "$DJANGO_DB" = "SQLITE" ]; then
      tox sqlite;
    elif [ "$DJANGO_DB" = "POSTGRES" ]; then
      tox postgres-travis;
    else
      echo 'Unexpected DJANGO_DB variable "$DJANGO_DB", error';
      exit 1;
    fi

after_success:
  - coverage combine --append
  - coverage report -m
  - pip install codecov
  - codecov
