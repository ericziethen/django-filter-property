name: CI/CD

on:
  push:
    branches:
    - feature/migrate-travis-to-jenkins  # TODO - TO BE REMOVED
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
    - main

jobs:

  test_matrix:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: [3.9, 3.8, 3.7, 3.6]
        # django-db: [SQLITE, POSTGRES]
        django-db: [SQLITE]
        volume_test: [FALSE]

        # Include will match the expanded matrix, if not it will add a job
        include:
            - python-version: 3.9
              django-db: SQLITE  # Maybe Use Postgres if Faster, or Both
              volume_test: mylinux-py39-all_filter_volume_test  # Now combination, trigger volume test
              script_print_envs: set
            - os: windows-latest
              script_print_envs: set
            - os: ubuntu-latest
              script_print_envs: printenv
            - django-db: SQLITE
              tox_args: sqlite
            # - django-db: POSTGRES
            #   tox_args: postgres-travis
    name: Py ${{ matrix.python-version }}, ${{ matrix.django-db }}, ${{ matrix.os }}
    runs-on: "${{ matrix.os }}"
    defaults:
      run:
        # Github actions doesn't support (at least right now) setting the shell based on environment variables
        # But setting the shell to bash will use Git-Bash on windows which can run batch scripts ok
        # https://github.community/t/using-matrix-to-specify-shell-is-it-possible/17065
        # https://github.community/t/declaring-a-default-shell-and-environment-variables-across-all-steps-in-a-job-github-actions/16228/2
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Print Info
        run: |
          echo ### Print Matrix Variables
          echo 'script_print_envs=${{ matrix.script_print_envs }}'
          echo 'tox_args=${{ matrix.tox_args }}'
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Env
        run: |
          pip --version
          python --version --version
          python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
          pip list
          python -m pip install --upgrade pip pipenv
          pip list
          ${{ matrix.script_print_envs }}
      - name: Check Enable VolumeTest
        if: ${{ matrix.volume_test != 'FALSE' }}
        run: |
          echo "TOXENV=${{ matrix.volume_test }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: pip install coverage tox-gh-actions
      - name: Run Tests
        env:
          TOX_SKIP_ENV: ".*all_filter_volume_test.*"
          TRAVIS_OS_NAME: LEGACY_TRAVIS_SETTING  # TODO - TO BE CHANGED TO A GENERIC CI NAME
        run: |
          echo Env Variables before Tox Run 'TOX_SKIP_ENV=${{ env.TOX_SKIP_ENV }}'
          coverage erase
          tox ${{ matrix.tox_args }}
      # - name: "Convert coverage"
      #   run: "python -m coverage xml"
      # - name: "Upload coverage to Codecov"
      #   # Using version https://github.com/codecov/codecov-action/releases/tag/v1.0.15
      #   uses: "codecov/codecov-action@239febf655bba88b16ff5dea1d3135ea8663a1f9"
      #   with:
      #     fail_ci_if_error: true

  # linting:
  #   strategy:
  #     matrix:
  #       os: ["ubuntu-latest", "windows-latest"]
  #       include:
  #           - os: windows-latest
  #             script_name: .\dev/run_linters.bat
  #           - os: ubuntu-latest
  #             script_name: ./dev/run_linters.sh
  #   name: Latest Dev Linting
  #   runs-on: "${{ matrix.os }}"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.9'
  #     - name: Setup Env
  #       run: |
  #         pip --version
  #         python --version --version
  #         pip list
  #         python -m pip install --upgrade pip pipenv
  #         pip list
  #     - name: Install Dependencies
  #       run: |
  #         # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
  #         pip install -r requirements.txt
  #         pip list
  #     - name: Run Linters
  #       run: ${{ matrix.script_name }}

  # package_safety_checks:
  #   strategy:
  #     matrix:
  #       os: ["ubuntu-latest", "windows-latest"]
  #       include:
  #           - os: windows-latest
  #             script_name: .\dev/check_package_safety.bat
  #           - os: ubuntu-latest
  #             script_name: ./dev/check_package_safety.sh
  #   name: Pkg Safety (Failure Allowed)
  #   runs-on: "${{ matrix.os }}"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.9'
  #     - name: Setup Env
  #       run: |
  #         pip --version
  #         python --version --version
  #         python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
  #         pip list
  #         python -m pip install --upgrade pip pipenv
  #         pip list
  #     - name: Install Dependencies
  #       run: |
  #         # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
  #         pip install -r requirements.txt
  #         pip list
  #     - name: Run Package Safety
  #       run: ${{ matrix.script_name }}
