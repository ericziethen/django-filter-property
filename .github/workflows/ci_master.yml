name: CI/CD

on:
  push:
    branches:
    - feature/migrate-travis-to-jenkins  # TODO - TO BE REMVED
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
    - main

jobs:




  # test_matrix:
  #   strategy:
  #     matrix:
  #       # os: ["ubuntu-latest", "windows-latest"]
  #       # python-version: [3.9, 3.8, 3.7, 3.6]
  #       # django-db: [SQLITE, POSTGRES]
  #       os: ["ubuntu-latest"]
  #       python-version: [3.9]
  #       django-db: [SQLITE]
  #       include:
  #           - os: windows-latest
  #             script_print_envs: set
  #           - os: ubuntu-latest
  #             script_print_envs: printenv
  #     name: Python ${{ matrix.python-version }} - Django DB ${{ matrix.django-db }}
  #     runs-on: "${{ matrix.os }}"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set Environment Variables
  #       env:
  #         DJANGO_DB: ${{ matrix.django-db }}
  #         TOX_SKIP_ENV: ".*all_filter_volume_test.*"
  #       run: |
  #         echo DJANGO_DB: $DJANGO_DB
  #         echo TOX_SKIP_ENV: $TOX_SKIP_ENV
  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Setup Env
  #       run: |
  #         pip --version
  #         python --version --version
  #         python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
  #         pip list
  #         python -m pip install --upgrade pip pipenv
  #         pip list
  #         ${{ matrix.script_print_envs }}












  linting:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        include:
            - os: windows-latest
              script_name: .\dev/run_linters.bat
            - os: ubuntu-latest
              script_name: ./dev/run_linters.sh
    name: Latest Dev Linting
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Setup Env
        run: |
          pip --version
          python --version --version
          pip list
          python -m pip install --upgrade pip pipenv
          pip list
      - name: Install Dependencies
        run: |
          # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
          pip install -r requirements.txt
          pip list
      - name: Run Linters
        run: ${{ matrix.script_name }}

  package_safety_checks:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        include:
            - os: windows-latest
              script_name: .\dev/check_package_safety.bat
            - os: ubuntu-latest
              script_name: ./dev/check_package_safety.sh
    name: Pkg Safety (Failure Allowed)
    runs-on: "${{ matrix.os }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Setup Env
        run: |
          pip --version
          python --version --version
          python -c "import sqlite3; print('sqlite3 Version on Python:', sqlite3.sqlite_version)"
          pip list
          python -m pip install --upgrade pip pipenv
          pip list
      - name: Install Dependencies
        run: |
          # don't use the '--upgrade' to not upgrade pinned requirements with generic ones
          pip install -r requirements.txt
          pip list
      - name: Run Package Safety
        run: ${{ matrix.script_name }}
